<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [Bootloader\Bootloader.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image Bootloader\Bootloader.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Fri Mar 26 14:55:06 2021
<BR><P>
<H3>Maximum Stack Usage =       2416 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SDCARD_WriteData &rArr; SDCARD_WaitNotBusy &rArr; SDCARD_ReadBytes &rArr; USER_SPI_TransmitReceive
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[dd]">pattern_match</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[dd]">pattern_match</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[3d]">AES1_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[3e]">AES2_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32wbxx_it.o(i.BusFault_Handler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[1f]">C2SEV_PWR_C2H_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[20]">COMP_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[34]">CRS_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[41]">DMA2_Channel1_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[42]">DMA2_Channel2_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[43]">DMA2_Channel3_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[44]">DMA2_Channel4_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[45]">DMA2_Channel5_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[46]">DMA2_Channel6_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[47]">DMA2_Channel7_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[48]">DMAMUX1_OVR_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32wbxx_it.o(i.DebugMon_Handler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[40]">FPU_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[38]">HSEM_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32wbxx_it.o(i.HardFault_Handler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[29]">I2C1_ER_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[28]">I2C1_EV_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[2b]">I2C3_ER_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[2a]">I2C3_EV_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[36]">IPCC_C1_RX_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[37]">IPCC_C1_TX_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[3b]">LCD_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[39]">LPTIM1_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[3a]">LPTIM2_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[2f]">LPUART1_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32wbxx_it.o(i.MemManage_Handler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32wbxx_it.o(i.NMI_Handler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[27]">PKA_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[b]">PVD_PVM_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[35]">PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32wbxx_it.o(i.PendSV_Handler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[3c]">QUADSPI_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[3f]">RNG_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[30]">SAI1_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[2c]">SPI1_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[2d]">SPI2_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32wbxx_it.o(i.SVC_Handler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32wbxx_it.o(i.SysTick_Handler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[4a]">SystemInit</a> from system_stm32wbxx.o(i.SystemInit) referenced from startup_stm32wb55xx_cm4.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_LSECSS_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM17_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM16_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[31]">TSC_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[2e]">USART1_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[1d]">USB_HP_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[1e]">USB_LP_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32wbxx_it.o(i.UsageFault_Handler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[4b]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32wb55xx_cm4.o(.text)
 <LI><a href="#[51]">__tim16_hasCounted_clearUIFflag</a> from tim16_driver_functions.o(i.__tim16_hasCounted_clearUIFflag) referenced from tim16_subsystem.o(i._init_tim16_subsystem)
 <LI><a href="#[4c]">__tim16_initTimer</a> from tim16_driver_functions.o(i.__tim16_initTimer) referenced from tim16_subsystem.o(i._init_tim16_subsystem)
 <LI><a href="#[50]">__tim16_isCounting</a> from tim16_driver_functions.o(i.__tim16_isCounting) referenced from tim16_subsystem.o(i._init_tim16_subsystem)
 <LI><a href="#[4e]">__tim16_setCounterValue</a> from tim16_driver_functions.o(i.__tim16_setCounterValue) referenced from tim16_subsystem.o(i._init_tim16_subsystem)
 <LI><a href="#[4d]">__tim16_setPrescalerValue</a> from tim16_driver_functions.o(i.__tim16_setPrescalerValue) referenced from tim16_subsystem.o(i._init_tim16_subsystem)
 <LI><a href="#[4f]">__tim16_startTimer</a> from tim16_driver_functions.o(i.__tim16_startTimer) referenced from tim16_subsystem.o(i._init_tim16_subsystem)
 <LI><a href="#[52]">__tim16_stopTimer</a> from tim16_driver_functions.o(i.__tim16_stopTimer) referenced from tim16_subsystem.o(i._init_tim16_subsystem)
 <LI><a href="#[53]">__uSD_isAvailable</a> from usd_driver_functions.o(i.__uSD_isAvailable) referenced from usd_subsystem.o(i._init_uSD_subsystem)
 <LI><a href="#[49]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4b]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(.text)
</UL>
<P><STRONG><a name="[f5]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[54]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[59]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[f6]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[f7]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[f8]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[f9]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[fa]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>AES1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>AES2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>C2SEV_PWR_C2H_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMAMUX1_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>HSEM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>IPCC_C1_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>IPCC_C1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>PKA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_LSECSS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[fb]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[ef]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fc]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[fd]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[86]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[ff]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[55]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[100]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>FLASH_PageErase</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32wbxx_hal_flash_ex.o(i.FLASH_PageErase))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[5a]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32wbxx_hal_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[5c]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32wbxx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eternalFlashing_FMW_DOWNLOAD_ERROR
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eternalFlashing
</UL>

<P><STRONG><a name="[d2]"></a>HAL_FLASHEx_AllowOperation</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wbxx_hal_flash_ex.o(i.HAL_FLASHEx_AllowOperation))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eraseFlash
</UL>

<P><STRONG><a name="[5d]"></a>HAL_FLASHEx_Erase</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, stm32wbxx_hal_flash_ex.o(i.HAL_FLASHEx_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FlushCaches
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PageErase
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eraseFlash
</UL>

<P><STRONG><a name="[d3]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32wbxx_hal_flash.o(i.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eraseFlash
</UL>

<P><STRONG><a name="[60]"></a>HAL_FLASH_Program</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, stm32wbxx_hal_flash.o(i.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Fast
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_DoubleWord
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d1]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32wbxx_hal_flash.o(i.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eraseFlash
</UL>

<P><STRONG><a name="[87]"></a>HAL_GPIO_Init</STRONG> (Thumb, 394 bytes, Stack size 44 bytes, stm32wbxx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[8f]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32wbxx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[5b]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32wbxx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNR
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNQ
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNP
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatency
</UL>

<P><STRONG><a name="[7a]"></a>HAL_GetTickPrio</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32wbxx_hal.o(i.HAL_GetTickPrio))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[aa]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wbxx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[63]"></a>HAL_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32wbxx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65]"></a>HAL_InitTick</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32wbxx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[66]"></a>HAL_MspInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32wbxx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[69]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32wbxx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[64]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32wbxx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[95]"></a>HAL_PWREx_GetVoltageRange</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32wbxx_hal_pwr_ex.o(i.HAL_PWREx_GetVoltageRange))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>

<P><STRONG><a name="[6d]"></a>HAL_PWR_EnableBkUpAccess</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wbxx_hal_pwr.o(i.HAL_PWR_EnableBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[6b]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 530 bytes, Stack size 24 bytes, stm32wbxx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI1_ConfigNR
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNR
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNQ
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNP
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetRNGClockSource
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetLPTIMClockSource
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetI2CClockSource
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetCLK48ClockSource
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSE_IsReady
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[75]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 496 bytes, Stack size 24 bytes, stm32wbxx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTickPrio
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_MSI_IsReady
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSI_IsReady
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSE_IsReady
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSysClkSource
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[67]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32wbxx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[7b]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, stm32wbxx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_GetMainSource
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_MSI_GetRange
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSysClkSource
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>

<P><STRONG><a name="[7e]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1406 bytes, Stack size 24 bytes, stm32wbxx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_RCC_OscConfig &rArr; RCC_SetFlashLatencyFromMSIRange &rArr; RCC_SetFlashLatency
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_GetMainSource
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_MSI_SetRange
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_MSI_SetCalibTrimming
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_MSI_IsReady
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_MSI_GetRange
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSI1_IsReady
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSI_SetCalibTrimming
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSI_IsReady
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSE_IsReady
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSysClkSource
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[84]"></a>HAL_SPI_Init</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, stm32wbxx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[85]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, stm32wbxx_hal_msp.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[68]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32wbxx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>IH_ProcessString</STRONG> (Thumb, 438 bytes, Stack size 40 bytes, ihc.o(i.IH_ProcessString))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IH_ProcessString &rArr; ihc_getbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihc_getbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8a]"></a>InitSystemStructure</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, system.o(i.InitSystemStructure))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InitSystemStructure
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_uSD_subsystem
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_tim16_subsystem
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_it.o(i.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>SDCARD_Init</STRONG> (Thumb, 372 bytes, Stack size 24 bytes, sdcard_if.o(i.SDCARD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SDCARD_Init &rArr; SDCARD_WaitNotBusy &rArr; SDCARD_ReadBytes &rArr; USER_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_SPI_Transmit
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_SDCARD_isInitialisedCallback
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_SDCARD_isAvailable
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_SDCARD_Unselect
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_SDCARD_Select
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WaitNotBusy
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadR1
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[9f]"></a>SDCARD_ReadBegin</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, sdcard_if.o(i.SDCARD_ReadBegin))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SDCARD_ReadBegin &rArr; SDCARD_WaitNotBusy &rArr; SDCARD_ReadBytes &rArr; USER_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_SPI_Transmit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_SDCARD_isAvailable
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_SDCARD_Unselect
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_SDCARD_Select
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WaitNotBusy
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadR1
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[9d]"></a>SDCARD_ReadBytes</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, sdcard_if.o(i.SDCARD_ReadBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SDCARD_ReadBytes &rArr; USER_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WaitNotBusy
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WriteEnd
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WriteData
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadEnd
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadData
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_Init
</UL>

<P><STRONG><a name="[a1]"></a>SDCARD_ReadData</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, sdcard_if.o(i.SDCARD_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SDCARD_ReadData &rArr; SDCARD_WaitDataToken &rArr; USER_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_SDCARD_isAvailable
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_SDCARD_Unselect
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_SDCARD_Select
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WaitDataToken
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[a3]"></a>SDCARD_ReadEnd</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, sdcard_if.o(i.SDCARD_ReadEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDCARD_ReadEnd &rArr; SDCARD_ReadR1 &rArr; USER_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_SPI_Transmit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_SDCARD_isAvailable
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_SDCARD_Unselect
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_SDCARD_Select
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadR1
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[9c]"></a>SDCARD_ReadR1</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sdcard_if.o(i.SDCARD_ReadR1))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SDCARD_ReadR1 &rArr; USER_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_SPI_TransmitReceive
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_ICP_ResetCondition
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_ICP_ConditionValidation
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_ICP_CheckCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WriteBegin
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadEnd
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadBegin
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_Init
</UL>

<P><STRONG><a name="[a2]"></a>SDCARD_WaitDataToken</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, sdcard_if.o(i.SDCARD_WaitDataToken))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SDCARD_WaitDataToken &rArr; USER_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_SPI_TransmitReceive
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_ICP_ResetCondition
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_ICP_ConditionValidation
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_ICP_CheckCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadData
</UL>

<P><STRONG><a name="[9b]"></a>SDCARD_WaitNotBusy</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, sdcard_if.o(i.SDCARD_WaitNotBusy))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SDCARD_WaitNotBusy &rArr; SDCARD_ReadBytes &rArr; USER_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_ICP_ResetCondition
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_ICP_ConditionValidation
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_ICP_CheckCondition
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WriteEnd
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WriteData
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WriteBegin
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadBegin
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_Init
</UL>

<P><STRONG><a name="[a7]"></a>SDCARD_WriteBegin</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, sdcard_if.o(i.SDCARD_WriteBegin))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SDCARD_WriteBegin &rArr; SDCARD_WaitNotBusy &rArr; SDCARD_ReadBytes &rArr; USER_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_SPI_Transmit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_SDCARD_isAvailable
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_SDCARD_Unselect
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_SDCARD_Select
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WaitNotBusy
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadR1
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[a8]"></a>SDCARD_WriteData</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, sdcard_if.o(i.SDCARD_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SDCARD_WriteData &rArr; SDCARD_WaitNotBusy &rArr; SDCARD_ReadBytes &rArr; USER_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_SPI_Transmit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_SDCARD_isAvailable
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_SDCARD_Unselect
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_SDCARD_Select
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WaitNotBusy
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[a9]"></a>SDCARD_WriteEnd</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, sdcard_if.o(i.SDCARD_WriteEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SDCARD_WriteEnd &rArr; SDCARD_WaitNotBusy &rArr; SDCARD_ReadBytes &rArr; USER_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_SPI_Transmit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_SDCARD_isAvailable
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_SDCARD_Unselect
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_SDCARD_Select
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WaitNotBusy
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32wbxx_it.o(i.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>SystemClock_Config</STRONG> (Thumb, 168 bytes, Stack size 200 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; RCC_SetFlashLatencyFromMSIRange &rArr; RCC_SetFlashLatency
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4a]"></a>SystemInit</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, system_stm32wbxx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(.text)
</UL>
<P><STRONG><a name="[a5]"></a>USER_ICP_CheckCondition</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sd_override_functions.o(i.USER_ICP_CheckCondition))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WaitNotBusy
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WaitDataToken
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadR1
</UL>

<P><STRONG><a name="[a6]"></a>USER_ICP_ConditionValidation</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sd_override_functions.o(i.USER_ICP_ConditionValidation))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USER_ICP_ConditionValidation
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WaitNotBusy
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WaitDataToken
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadR1
</UL>

<P><STRONG><a name="[a4]"></a>USER_ICP_ResetCondition</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sd_override_functions.o(i.USER_ICP_ResetCondition))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USER_ICP_ResetCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WaitNotBusy
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WaitDataToken
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadR1
</UL>

<P><STRONG><a name="[cf]"></a>USER_Return_uSD_Status</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sd_override_functions.o(i.USER_Return_uSD_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USER_Return_uSD_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>

<P><STRONG><a name="[9a]"></a>USER_SDCARD_Select</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sd_override_functions.o(i.USER_SDCARD_Select))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WriteEnd
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WriteData
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WriteBegin
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadEnd
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadData
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadBegin
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_Init
</UL>

<P><STRONG><a name="[98]"></a>USER_SDCARD_Unselect</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sd_override_functions.o(i.USER_SDCARD_Unselect))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WriteEnd
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WriteData
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WriteBegin
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadEnd
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadData
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadBegin
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_Init
</UL>

<P><STRONG><a name="[97]"></a>USER_SDCARD_isAvailable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sd_override_functions.o(i.USER_SDCARD_isAvailable))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WriteEnd
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WriteData
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WriteBegin
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadEnd
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadData
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadBegin
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_Init
</UL>

<P><STRONG><a name="[9e]"></a>USER_SDCARD_isInitialisedCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sd_override_functions.o(i.USER_SDCARD_isInitialisedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_Init
</UL>

<P><STRONG><a name="[99]"></a>USER_SPI_Transmit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, sd_override_functions.o(i.USER_SPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USER_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WriteEnd
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WriteData
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WriteBegin
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadEnd
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadBegin
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_Init
</UL>

<P><STRONG><a name="[a0]"></a>USER_SPI_TransmitReceive</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, sd_override_functions.o(i.USER_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USER_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WaitDataToken
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadR1
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadBytes
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[101]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[102]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[103]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[51]"></a>__tim16_hasCounted_clearUIFflag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tim16_driver_functions.o(i.__tim16_hasCounted_clearUIFflag))
<BR>[Address Reference Count : 1]<UL><LI> tim16_subsystem.o(i._init_tim16_subsystem)
</UL>
<P><STRONG><a name="[4c]"></a>__tim16_initTimer</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, tim16_driver_functions.o(i.__tim16_initTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __tim16_initTimer &rArr; ___tim16_updatePscArrCntRegisters
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;___tim16_updatePscArrCntRegisters
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;___dummyDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tim16_subsystem.o(i._init_tim16_subsystem)
</UL>
<P><STRONG><a name="[50]"></a>__tim16_isCounting</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tim16_driver_functions.o(i.__tim16_isCounting))
<BR>[Address Reference Count : 1]<UL><LI> tim16_subsystem.o(i._init_tim16_subsystem)
</UL>
<P><STRONG><a name="[4e]"></a>__tim16_setCounterValue</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tim16_driver_functions.o(i.__tim16_setCounterValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __tim16_setCounterValue &rArr; ___tim16_updatePscArrCntRegisters
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;___tim16_updatePscArrCntRegisters
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tim16_subsystem.o(i._init_tim16_subsystem)
</UL>
<P><STRONG><a name="[4d]"></a>__tim16_setPrescalerValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tim16_driver_functions.o(i.__tim16_setPrescalerValue))
<BR>[Address Reference Count : 1]<UL><LI> tim16_subsystem.o(i._init_tim16_subsystem)
</UL>
<P><STRONG><a name="[4f]"></a>__tim16_startTimer</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tim16_driver_functions.o(i.__tim16_startTimer))
<BR>[Address Reference Count : 1]<UL><LI> tim16_subsystem.o(i._init_tim16_subsystem)
</UL>
<P><STRONG><a name="[52]"></a>__tim16_stopTimer</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tim16_driver_functions.o(i.__tim16_stopTimer))
<BR>[Address Reference Count : 1]<UL><LI> tim16_subsystem.o(i._init_tim16_subsystem)
</UL>
<P><STRONG><a name="[53]"></a>__uSD_isAvailable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usd_driver_functions.o(i.__uSD_isAvailable))
<BR>[Address Reference Count : 1]<UL><LI> usd_subsystem.o(i._init_uSD_subsystem)
</UL>
<P><STRONG><a name="[8c]"></a>_init_tim16_subsystem</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tim16_subsystem.o(i._init_tim16_subsystem))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemStructure
</UL>

<P><STRONG><a name="[8b]"></a>_init_uSD_subsystem</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usd_subsystem.o(i._init_uSD_subsystem))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemStructure
</UL>

<P><STRONG><a name="[cc]"></a>disk_initialize</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = disk_initialize &rArr; SDCARD_Init &rArr; SDCARD_WaitNotBusy &rArr; SDCARD_ReadBytes &rArr; USER_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[f4]"></a>disk_ioctl</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, diskio.o(i.disk_ioctl))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[cd]"></a>disk_read</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, diskio.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = disk_read &rArr; SDCARD_ReadData &rArr; SDCARD_WaitDataToken &rArr; USER_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadEnd
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadData
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadBegin
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[ce]"></a>disk_status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diskio.o(i.disk_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disk_status &rArr; USER_Return_uSD_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_Return_uSD_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[c0]"></a>disk_write</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, diskio.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = disk_write &rArr; SDCARD_WriteData &rArr; SDCARD_WaitNotBusy &rArr; SDCARD_ReadBytes &rArr; USER_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WriteEnd
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WriteData
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WriteBegin
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
</UL>

<P><STRONG><a name="[d0]"></a>eraseFlash</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, main.o(i.eraseFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = eraseFlash &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_AllowOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d4]"></a>eternalFlashing</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, main.o(i.eternalFlashing))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eternalFlashing &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d5]"></a>eternalFlashing_FMW_DOWNLOAD_ERROR</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, main.o(i.eternalFlashing_FMW_DOWNLOAD_ERROR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eternalFlashing_FMW_DOWNLOAD_ERROR &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d6]"></a>f_close</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; SDCARD_WriteData &rArr; SDCARD_WaitNotBusy &rArr; SDCARD_ReadBytes &rArr; USER_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d9]"></a>f_findfirst</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ff.o(i.f_findfirst))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = f_findfirst &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SDCARD_WriteData &rArr; SDCARD_WaitNotBusy &rArr; SDCARD_ReadBytes &rArr; USER_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_findnext
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[db]"></a>f_findnext</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, ff.o(i.f_findnext))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = f_findnext &rArr; f_readdir &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SDCARD_WriteData &rArr; SDCARD_WaitNotBusy &rArr; SDCARD_ReadBytes &rArr; USER_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_match
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_findfirst
</UL>

<P><STRONG><a name="[de]"></a>f_gets</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, ff.o(i.f_gets))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = f_gets &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SDCARD_WriteData &rArr; SDCARD_WaitNotBusy &rArr; SDCARD_ReadBytes &rArr; USER_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e0]"></a>f_mount</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = f_mount &rArr; mount_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SDCARD_WriteData &rArr; SDCARD_WaitNotBusy &rArr; SDCARD_ReadBytes &rArr; USER_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e3]"></a>f_open</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SDCARD_WriteData &rArr; SDCARD_WaitNotBusy &rArr; SDCARD_ReadBytes &rArr; USER_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[da]"></a>f_opendir</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ff.o(i.f_opendir))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SDCARD_WriteData &rArr; SDCARD_WaitNotBusy &rArr; SDCARD_ReadBytes &rArr; USER_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_findfirst
</UL>

<P><STRONG><a name="[df]"></a>f_read</STRONG> (Thumb, 324 bytes, Stack size 48 bytes, ff.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SDCARD_WriteData &rArr; SDCARD_WaitNotBusy &rArr; SDCARD_ReadBytes &rArr; USER_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_gets
</UL>

<P><STRONG><a name="[dc]"></a>f_readdir</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ff.o(i.f_readdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = f_readdir &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SDCARD_WriteData &rArr; SDCARD_WaitNotBusy &rArr; SDCARD_ReadBytes &rArr; USER_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_findnext
</UL>

<P><STRONG><a name="[d7]"></a>f_sync</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; SDCARD_WriteData &rArr; SDCARD_WaitNotBusy &rArr; SDCARD_ReadBytes &rArr; USER_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[ec]"></a>f_unlink</STRONG> (Thumb, 146 bytes, Stack size 128 bytes, ff.o(i.f_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SDCARD_WriteData &rArr; SDCARD_WaitNotBusy &rArr; SDCARD_ReadBytes &rArr; USER_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ed]"></a>f_write</STRONG> (Thumb, 384 bytes, Stack size 48 bytes, ff.o(i.f_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SDCARD_WriteData &rArr; SDCARD_WaitNotBusy &rArr; SDCARD_ReadBytes &rArr; USER_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b9]"></a>ff_oem2uni</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ffunicode.o(i.ff_oem2uni))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ff_oem2uni
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[bc]"></a>ff_uni2oem</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ffunicode.o(i.ff_uni2oem))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ff_uni2oem
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[b3]"></a>ff_wtoupper</STRONG> (Thumb, 128 bytes, Stack size 12 bytes, ffunicode.o(i.ff_wtoupper))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>

<P><STRONG><a name="[f0]"></a>isAppAvailable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.isAppAvailable))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f2]"></a>jumpToApplication</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(i.jumpToApplication))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[49]"></a>main</STRONG> (Thumb, 716 bytes, Stack size 2016 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 2416<LI>Call Chain = main &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SDCARD_WriteData &rArr; SDCARD_WaitNotBusy &rArr; SDCARD_ReadBytes &rArr; USER_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_gets
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_findfirst
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemStructure
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IH_ProcessString
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnOffSPI
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumpToApplication
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isAppAvailable
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eternalFlashing_FMW_DOWNLOAD_ERROR
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eternalFlashing
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eraseFlash
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[f1]"></a>turnOffSPI</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, main.o(i.turnOffSPI))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[8e]"></a>LL_AHB2_GRP1_EnableClock</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(i.LL_AHB2_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_AHB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[8d]"></a>MX_GPIO_Init</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, main.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB2_GRP1_EnableClock
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[90]"></a>MX_SPI1_Init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, main.o(i.MX_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = MX_SPI1_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ad]"></a>___dummyDelay</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tim16_driver_functions.o(i.___dummyDelay))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tim16_initTimer
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;___tim16_updatePscArrCntRegisters
</UL>

<P><STRONG><a name="[ac]"></a>___tim16_updatePscArrCntRegisters</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, tim16_driver_functions.o(i.___tim16_updatePscArrCntRegisters))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ___tim16_updatePscArrCntRegisters
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;___dummyDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tim16_setCounterValue
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tim16_initTimer
</UL>

<P><STRONG><a name="[ee]"></a>AsciiToHex</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ihc.o(i.AsciiToHex))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihc_getbyte
</UL>

<P><STRONG><a name="[89]"></a>ihc_getbyte</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ihc.o(i.ihc_getbyte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ihc_getbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsciiToHex
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IH_ProcessString
</UL>

<P><STRONG><a name="[ae]"></a>check_fs</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SDCARD_WriteData &rArr; SDCARD_WaitNotBusy &rArr; SDCARD_ReadBytes &rArr; USER_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[ba]"></a>chk_chr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.chk_chr))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[bf]"></a>clst2sect</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.clst2sect))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
</UL>

<P><STRONG><a name="[b2]"></a>cmp_lfn</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, ff.o(i.cmp_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = cmp_lfn &rArr; ff_wtoupper
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[b4]"></a>create_chain</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SDCARD_WriteData &rArr; SDCARD_WaitNotBusy &rArr; SDCARD_ReadBytes &rArr; USER_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[b7]"></a>create_name</STRONG> (Thumb, 560 bytes, Stack size 40 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = create_name &rArr; ff_uni2oem
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_uni2oem
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_oem2uni
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbc_1st
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[b8]"></a>dbc_1st</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ff.o(i.dbc_1st))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[bd]"></a>dir_clear</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, ff.o(i.dir_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = dir_clear &rArr; sync_window &rArr; disk_write &rArr; SDCARD_WriteData &rArr; SDCARD_WaitNotBusy &rArr; SDCARD_ReadBytes &rArr; USER_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[c1]"></a>dir_find</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, ff.o(i.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SDCARD_WriteData &rArr; SDCARD_WaitNotBusy &rArr; SDCARD_ReadBytes &rArr; USER_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[c4]"></a>dir_next</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SDCARD_WriteData &rArr; SDCARD_WaitNotBusy &rArr; SDCARD_ReadBytes &rArr; USER_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[c5]"></a>dir_read</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, ff.o(i.dir_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SDCARD_WriteData &rArr; SDCARD_WaitNotBusy &rArr; SDCARD_ReadBytes &rArr; USER_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[c7]"></a>dir_register</STRONG> (Thumb, 480 bytes, Stack size 72 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SDCARD_WriteData &rArr; SDCARD_WaitNotBusy &rArr; SDCARD_ReadBytes &rArr; USER_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[cb]"></a>dir_remove</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ff.o(i.dir_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = dir_remove &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SDCARD_WriteData &rArr; SDCARD_WaitNotBusy &rArr; SDCARD_ReadBytes &rArr; USER_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>

<P><STRONG><a name="[c2]"></a>dir_sdi</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SDCARD_WriteData &rArr; SDCARD_WaitNotBusy &rArr; SDCARD_ReadBytes &rArr; USER_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[e4]"></a>follow_path</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SDCARD_WriteData &rArr; SDCARD_WaitNotBusy &rArr; SDCARD_ReadBytes &rArr; USER_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
</UL>

<P><STRONG><a name="[c9]"></a>gen_numname</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, ff.o(i.gen_numname))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gen_numname
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbc_1st
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[f3]"></a>get_achar</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ff.o(i.get_achar))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_match
</UL>

<P><STRONG><a name="[b5]"></a>get_fat</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SDCARD_WriteData &rArr; SDCARD_WaitNotBusy &rArr; SDCARD_ReadBytes &rArr; USER_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[ea]"></a>get_fileinfo</STRONG> (Thumb, 336 bytes, Stack size 40 bytes, ff.o(i.get_fileinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_fileinfo &rArr; ff_uni2oem
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_uni2oem
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[e1]"></a>get_ldnumber</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[e6]"></a>ld_clust</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ff.o(i.ld_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ld_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[e9]"></a>ld_dword</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ff.o(i.ld_dword))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>

<P><STRONG><a name="[b0]"></a>ld_word</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ff.o(i.ld_word))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[b1]"></a>mem_cmp</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ff.o(i.mem_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[c8]"></a>mem_cpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ff.o(i.mem_cpy))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[bb]"></a>mem_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ff.o(i.mem_set))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[e2]"></a>mount_volume</STRONG> (Thumb, 576 bytes, Stack size 40 bytes, ff.o(i.mount_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mount_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SDCARD_WriteData &rArr; SDCARD_WaitNotBusy &rArr; SDCARD_ReadBytes &rArr; USER_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
</UL>

<P><STRONG><a name="[af]"></a>move_window</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr; SDCARD_WriteData &rArr; SDCARD_WaitNotBusy &rArr; SDCARD_ReadBytes &rArr; USER_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[dd]"></a>pattern_match</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, ff.o(i.pattern_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = pattern_match &rArr;  pattern_match (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_match
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_achar
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_findnext
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_match
</UL>

<P><STRONG><a name="[c6]"></a>pick_lfn</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, ff.o(i.pick_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pick_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>

<P><STRONG><a name="[b6]"></a>put_fat</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SDCARD_WriteData &rArr; SDCARD_WaitNotBusy &rArr; SDCARD_ReadBytes &rArr; USER_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[e8]"></a>remove_chain</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SDCARD_WriteData &rArr; SDCARD_WaitNotBusy &rArr; SDCARD_ReadBytes &rArr; USER_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[e7]"></a>st_clust</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ff.o(i.st_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = st_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[e5]"></a>st_dword</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.st_dword))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
</UL>

<P><STRONG><a name="[ca]"></a>st_word</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ff.o(i.st_word))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[c3]"></a>sum_sfn</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(i.sum_sfn))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[eb]"></a>sync_fs</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, ff.o(i.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write &rArr; SDCARD_WriteData &rArr; SDCARD_WaitNotBusy &rArr; SDCARD_ReadBytes &rArr; USER_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[be]"></a>sync_window</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = sync_window &rArr; disk_write &rArr; SDCARD_WriteData &rArr; SDCARD_WaitNotBusy &rArr; SDCARD_ReadBytes &rArr; USER_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
</UL>

<P><STRONG><a name="[d8]"></a>validate</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = validate &rArr; disk_status &rArr; USER_Return_uSD_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[79]"></a>LL_RCC_GetSysClkSource</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(i.LL_RCC_GetSysClkSource))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[77]"></a>LL_RCC_HSE_IsReady</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(i.LL_RCC_HSE_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[76]"></a>LL_RCC_HSI_IsReady</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(i.LL_RCC_HSI_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[82]"></a>LL_RCC_HSI_SetCalibTrimming</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(i.LL_RCC_HSI_SetCalibTrimming))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[83]"></a>LL_RCC_LSI1_IsReady</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(i.LL_RCC_LSI1_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[7d]"></a>LL_RCC_MSI_GetRange</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(i.LL_RCC_MSI_GetRange))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[78]"></a>LL_RCC_MSI_IsReady</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(i.LL_RCC_MSI_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[81]"></a>LL_RCC_MSI_SetCalibTrimming</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(i.LL_RCC_MSI_SetCalibTrimming))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[80]"></a>LL_RCC_MSI_SetRange</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(i.LL_RCC_MSI_SetRange))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[7c]"></a>LL_RCC_PLL_GetMainSource</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(i.LL_RCC_PLL_GetMainSource))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[94]"></a>RCC_SetFlashLatency</STRONG> (Thumb, 134 bytes, Stack size 72 bytes, stm32wbxx_hal_rcc.o(i.RCC_SetFlashLatency))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RCC_SetFlashLatency
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>

<P><STRONG><a name="[7f]"></a>RCC_SetFlashLatencyFromMSIRange</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32wbxx_hal_rcc.o(i.RCC_SetFlashLatencyFromMSIRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RCC_SetFlashLatencyFromMSIRange &rArr; RCC_SetFlashLatency
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_GetVoltageRange
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatency
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[6e]"></a>LL_RCC_LSE_IsReady</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc_ex.o(i.LL_RCC_LSE_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[91]"></a>LL_RCC_PLLSAI1_Disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc_ex.o(i.LL_RCC_PLLSAI1_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNR
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNQ
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNP
</UL>

<P><STRONG><a name="[93]"></a>LL_RCC_PLLSAI1_Enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc_ex.o(i.LL_RCC_PLLSAI1_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNR
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNQ
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNP
</UL>

<P><STRONG><a name="[92]"></a>LL_RCC_PLLSAI1_IsReady</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc_ex.o(i.LL_RCC_PLLSAI1_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNR
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNQ
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNP
</UL>

<P><STRONG><a name="[71]"></a>LL_RCC_SetCLK48ClockSource</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc_ex.o(i.LL_RCC_SetCLK48ClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[70]"></a>LL_RCC_SetI2CClockSource</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32wbxx_hal_rcc_ex.o(i.LL_RCC_SetI2CClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_RCC_SetI2CClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[6f]"></a>LL_RCC_SetLPTIMClockSource</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc_ex.o(i.LL_RCC_SetLPTIMClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[73]"></a>LL_RCC_SetRNGClockSource</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc_ex.o(i.LL_RCC_SetRNGClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[6c]"></a>RCCEx_PLLSAI1_ConfigNP</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, stm32wbxx_hal_rcc_ex.o(i.RCCEx_PLLSAI1_ConfigNP))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLLSAI1_ConfigNP
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLLSAI1_IsReady
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLLSAI1_Enable
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLLSAI1_Disable
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[72]"></a>RCCEx_PLLSAI1_ConfigNQ</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, stm32wbxx_hal_rcc_ex.o(i.RCCEx_PLLSAI1_ConfigNQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLLSAI1_ConfigNQ
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLLSAI1_IsReady
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLLSAI1_Enable
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLLSAI1_Disable
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[74]"></a>RCCEx_PLLSAI1_ConfigNR</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, stm32wbxx_hal_rcc_ex.o(i.RCCEx_PLLSAI1_ConfigNR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLLSAI1_ConfigNR
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLLSAI1_IsReady
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLLSAI1_Enable
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLLSAI1_Disable
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[62]"></a>FLASH_Program_DoubleWord</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32wbxx_hal_flash.o(i.FLASH_Program_DoubleWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_Program_DoubleWord
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[61]"></a>FLASH_Program_Fast</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, stm32wbxx_hal_flash.o(i.FLASH_Program_Fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FLASH_Program_Fast
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[5f]"></a>FLASH_FlushCaches</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, stm32wbxx_hal_flash_ex.o(i.FLASH_FlushCaches))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[6a]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32wbxx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
